# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
  mutation: Mutation
}

type AuthBody {
  refreshtoken: String
  token: String
}

type Category {
  childCategories: [Category]
  createTime: Timestamp
  fullParentId: String
  id: String
  imgUrl: String
  isDelete: Float
  isEnable: Float
  name: String
  number: Float
  parentCategory: Category
  parentId: String
  product: [Product]
  remark: String
  sort: Float
  updateTime: Timestamp
  userId: String
}

type CategoryPage {
  list: [Category]
  total: Float
}

type DataConfig {
  createTime: Timestamp
  id: String
  isDelete: Float
  name: String
  remark: String
  type: String
  updateTime: Timestamp
  value: JSON
}

type Dict {
  code: String
  createTime: Timestamp
  dictTypeCode: String
  dictTypeFirst: DictTypeFirst
  id: String
  isDelete: Float
  isDisable: Float
  name: String
  promoCode: [PromoCode]
  remark: String
  sort: Float
  updateTime: Timestamp
}

type DictTypeFirst {
  code: String
  createTime: Timestamp
  dict: Dict
  id: String
  isDelete: Float
  name: String
  parentCode: String
  remark: String
  sort: Float
  updateTime: Timestamp
}

type GroupOrder {
  createTime: Timestamp
  groupQueue: GroupQueue
  groupQueueId: String
  id: String
  isDelete: Float
  name: String
  orderGroupAmount: Float
  orderId: String
  orderInfo: OrderInfo
  updateTime: Timestamp
  user: User
  userId: String
}

type GroupQueue {
  createTime: Timestamp
  fillAmount: Float
  groupOrder: [GroupOrder]
  id: String
  isDelete: Float
  name: String
  product: Product
  productId: String
  sumFillAmount: Float
  updateTime: Timestamp
}

type Mutation {
  registerUser(data: UserItemInput): UserInRegister
  saveCategory(categoryItemInput: CategoryItemInput): Category
  saveDataConfig(dataConfigInput: DataConfigItemInput): DataConfig
  saveDictTypeFirst(dictTypeFirstItemInput: [DictTypeFirstItemInput]): [DictTypeFirst]
  saveGroupOrder(groupOrderItemInput: GroupOrderItemInput, groupQueueItemInput: GroupQueueItemInput, orderInfoItemInput: OrderInfoItemInput): OrderInfo
  saveOrder(orderInfoItemInput: OrderInfoItemInput): OrderInfo
  saveOrderList(orderInfoItemInput: [OrderInfoItemInput]): [OrderInfo]
  saveUserAddress(userAddress: UserAddressItemInput): UserAddress
  saveUserList(userItemInput: [UserItemInput]): [User]
  saveUserPayCard(userPayCard: UserPayCardItemInput): UserPayCard
  setUserAddressDefault(userAddress: UserAddressItemInput): UserAddress
  setUserPayCardDefault(userPayCard: UserPayCardItemInput): UserPayCard
  updateNumShopCart(shopCart: ShopCartItemInput, updateNum: Float = 1.0): ShopCart
  updateOrder(orderInfoItemInput: OrderInfoItemInput): OrderInfo
  updatePassword(data: UpdatePasswordInput): UpdatePasswordRes
  updateShopCart(shopCart: ShopCartItemInput): ShopCart
  updateUserInfo(userInfo: UserInfoItemInput): UserInfo
}

type OrderInfo {
  actuallyPaid: Float
  addressId: String
  couponDiscount: Float
  createTime: Timestamp
  currentUserLevel: String
  deductCoin: Float
  discountProductTotal: Float
  finishTime: Timestamp
  generateCoin: Float
  groupOrder: GroupOrder
  id: String
  isDelete: Float
  name: String
  number: String
  orderId: String
  paymentMethodCardId: String
  pickUpTime: Timestamp
  pickUpType: String
  rOrderProduct: [ROrderProduct!]
  rOrderUser: ROrderUser
  saleTax: Float
  selfAddressId: String
  state: Float
  subtotal: Float
  transportationCosts: Float
  updateTime: Timestamp
  user: User
  userAddress: UserAddress
  userPayCard: UserPayCard
  vipDiscount: Float
}

type OrderPage {
  list: [OrderInfo]
  total: Float
}

"page type"
type PageResult {
  total: Float
}

type Product {
  brand: String
  category: Category
  categoryId: String
  createTime: Timestamp
  groupAmount: Float
  groupAmountUnit: String
  groupAmountUnitString: String
  groupPrecision: Float
  groupPrecisionString: String
  groupQueue: [GroupQueue]
  groupRemark: String
  id: String
  img: [ProductImg]
  isDelete: Float
  isEnable: Float
  isGroup: Float
  isHot: Float
  isNew: Float
  name: String
  number: Float
  packingUnit: String
  packingUnitString: String
  priceIn: Float
  priceMarket: Float
  priceOut: Float
  rOrderProduct: [ROrderProduct!]
  remark: String
  shelvesTypes: String
  shopCart: [ShopCart]
  sort: Float
  stock: Float
  sumOrder: Float
  unit: String
  unitString: String
  updateTime: Timestamp
  weight: Float
}

type ProductImg {
  createTime: Timestamp
  id: String
  isDelete: Float
  name: String
  number: Float
  product: Product
  productId: String
  updateTime: Timestamp
  url: String
}

type ProductPage {
  list: [Product]
  total: Float
}

type PromoCode {
  code: String
  createTime: Timestamp
  discountAmount: Float
  discountCondition: String
  discountConditionAmount: Float
  discountType: String
  effectiveDateEnd: Timestamp
  effectiveDateStart: Timestamp
  id: String
  imgUrl: String
  isDelete: Float
  isDisable: Float
  name: String
  productCategory: String
  promoCodeType: String
  remark: String
  reuseTimes: Float
  title: String
  updateTime: Timestamp
  userLevel: Dict
}

type Query {
  categoryLevel(categoryItemInput: CategoryItemInput): Float
  categoryList(data: CategoryListInput): CategoryPage
  categoryRootParent(categoryItemInput: CategoryItemInput): Category
  getDataConfig(dataConfigInput: DataConfigItemInput): DataConfig
  getDictList(dictInput: DictInput): [Dict]
  getDictTypeList: [DictTypeFirst]
  groupQueueList(groupQueueItemInput: GroupQueueItemInput): [GroupQueue]
  homeCarouselImgs(dataConfigInput: DataConfigItemInput): DataConfig
  login(user: UserItemInput): AuthBody
  oneCategory(data: CategoryItemInput): Category
  oneUser: User
  orderDetail(id: String): OrderInfo
  orderList(fromUser: Boolean, orderInput: OrderInput): OrderPage
  orderListTotal(orderInput: OrderInput): Float
  passwordCode(password: String): String
  payCardListOneUser: [UserPayCard]
  productList(orderByInput: OrderByInput, productInput: ProductItemInput): ProductPage
  productListByIds(ids: [String]): ProductPage
  productListOrderByOrder(orderByType: String, productInput: ProductItemInput): ProductPage
  productsInCategory(categoryItemInput: CategoryItemInput, productItemInput: ProductItemInput): [Product]
  promoCodeList(promoCodeItemInput: PromoCodeItemInput): [PromoCode]
  refreshToken(refreshtoken: String!): AuthBody
  shopCartList: [ShopCart]
  testLongApi: String
  userAddress(userAddress: UserAddressItemInput): UserAddress
  userAddressListOneUser: [UserAddress]
  userList(userListInput: UserListInput): UserPage
  userPayCard(userPayCard: UserPayCardItemInput): UserPayCard
}

type ROrderProduct {
  count: Float
  createTime: Timestamp
  dealPrice: Float
  id: String
  isDelete: Float
  name: String
  orderId: String
  orderInfo: OrderInfo
  product: Product
  productId: String
  updateTime: Timestamp
}

type ROrderUser {
  createTime: Timestamp
  id: String
  isDelete: Float
  name: String
  orderId: String
  orderInfo: OrderInfo
  updateTime: Timestamp
  user: User
  userId: String
}

type ShopCart {
  createTime: Timestamp
  id: String
  isDelete: Float
  isNext: Float
  name: String
  number: Float
  product: Product
  productId: String
  updateTime: Timestamp
  user: User
  userId: String
}

type UpdatePasswordRes {
  authBody: AuthBody
  user: User
}

type User {
  createTime: Timestamp
  groupOrder: GroupOrder
  id: String
  isDelete: Float
  name: String
  orderAmountCurrentYear: Float
  orderCoinCurrentMonth: Float
  orderCoinNextMonth: Float
  orderInfo: [OrderInfo!]
  password: String
  rOrderUser: [ROrderUser!]
  shopCart: [ShopCart]
  type: Float
  updateTime: Timestamp
  userAddress: [UserAddress]
  userInfo: UserInfo
  userPayCard: [UserPayCard]
}

type UserAddress {
  address: String
  city: String
  combineAddress: String
  contactInformation: String
  contactUserName: String
  createTime: Timestamp
  district: String
  id: String
  isDefault: Float
  isDelete: Float
  name: String
  orderInfo: [OrderInfo]
  province: String
  updateTime: Timestamp
  user: User
  userId: String
  zip: String
}

type UserInRegister {
  refreshtoken: String
  token: String
  user: User
}

type UserInfo {
  createTime: Timestamp
  email: String
  id: String
  isDelete: Float
  name: String
  phone: String
  pickupAddressId: String
  updateTime: Timestamp
  user: User
  userId: String
  userLevel: String
  userLevelDict: Dict
}

type UserPage {
  list: [User]
  total: Float
}

type UserPayCard {
  address: String
  addressDetail: String
  city: String
  code: String
  contact: String
  createTime: Timestamp
  creditAddressInputType: String
  district: String
  expirationTime: Timestamp
  id: String
  isDefault: Float
  isDelete: Float
  name: String
  number: String
  orderInfo: [OrderInfo]
  province: String
  updateTime: Timestamp
  user: User
  userId: String
  userName: String
  zip: String
  zipCode: String
}

input CategoryItemInput {
  childCategories: [CategoryItemInput]
  createTime: Timestamp
  fullParentId: String
  id: String
  imgUrl: String
  isDelete: Float
  isEnable: Float
  name: String
  number: Float
  parentCategory: CategoryItemInput
  parentId: String
  product: [ProductItemInput]
  remark: String
  sort: Float
  updateTime: Timestamp
  userId: String
}

input CategoryListInput {
  category: CategoryItemInput
  orderByInput: OrderByInput
  pageInput: PageInput = {rows_per_page : 10.0, page : 0.0}
}

input DataConfigItemInput {
  createTime: Timestamp
  id: String
  isDelete: Float
  name: String
  remark: String
  type: String
  updateTime: Timestamp
  value: JSON
}

input DictInput {
  dictTypeCode: String
  isDisable: Float
}

input DictItemInput {
  code: String
  createTime: Timestamp
  dictTypeCode: String
  dictTypeFirst: DictTypeFirstItemInput
  id: String
  isDelete: Float
  isDisable: Float
  name: String
  promoCode: [PromoCodeItemInput]
  remark: String
  sort: Float
  updateTime: Timestamp
}

input DictTypeFirstItemInput {
  code: String
  createTime: Timestamp
  dict: DictItemInput
  id: String
  isDelete: Float
  name: String
  parentCode: String
  remark: String
  sort: Float
  updateTime: Timestamp
}

input GroupOrderItemInput {
  createTime: Timestamp
  groupQueue: GroupQueueItemInput
  groupQueueId: String
  id: String
  isDelete: Float
  name: String
  orderGroupAmount: Float
  orderId: String
  orderInfo: OrderInfoItemInput
  updateTime: Timestamp
  user: UserItemInput
  userId: String
}

input GroupQueueItemInput {
  createTime: Timestamp
  fillAmount: Float
  groupOrder: [GroupOrderItemInput]
  id: String
  isDelete: Float
  name: String
  product: ProductItemInput
  productId: String
  sumFillAmount: Float = 0.0
  updateTime: Timestamp
}

input OrderByAndPageInput {
  orderByObject: [[String]] = []
  page: Float = 0.0
  rows_per_page: Float = 10.0
}

input OrderByInput {
  orderByObject: [[String]]
}

input OrderInfoItemInput {
  actuallyPaid: Float
  addressId: String
  couponDiscount: Float
  createTime: Timestamp
  currentUserLevel: String
  deductCoin: Float
  discountProductTotal: Float
  finishTime: Timestamp
  generateCoin: Float
  groupOrder: GroupOrderItemInput
  id: String
  isDelete: Float
  name: String
  number: String
  orderId: String
  paymentMethodCardId: String
  pickUpTime: Timestamp
  pickUpType: String
  rOrderProduct: [ROrderProductItemInput!]
  rOrderUser: ROrderUserItemInput
  saleTax: Float
  selfAddressId: String
  state: Float
  subtotal: Float
  transportationCosts: Float
  updateTime: Timestamp
  user: UserItemInput
  userAddress: UserAddressItemInput
  userPayCard: UserPayCardItemInput
  vipDiscount: Float
}

input OrderInput {
  address: String
  city: String
  district: String
  endTime: Timestamp
  isGroup: Float
  number: String
  page: Float = 0.0
  pickUpTime: Timestamp
  pickUpType: String
  province: String
  registerName: String
  rows_per_page: Float = 10.0
  startTime: Timestamp
  state: Float
  userId: String
  userName: String
  zip: String
}

input PageInput {
  page: Float = 0.0
  rows_per_page: Float = 10.0
}

input ProductImgItemInput {
  createTime: Timestamp
  id: String
  isDelete: Float
  name: String
  number: Float
  product: ProductItemInput
  productId: String
  updateTime: Timestamp
  url: String
}

input ProductItemInput {
  brand: String
  category: CategoryItemInput
  categoryId: String
  createTime: Timestamp
  groupAmount: Float
  groupAmountUnit: String
  groupAmountUnitString: String
  groupPrecision: Float
  groupPrecisionString: String
  groupQueue: [GroupQueueItemInput]
  groupRemark: String
  id: String
  img: [ProductImgItemInput]
  isDelete: Float
  isEnable: Float
  isGroup: Float
  isHot: Float
  isNew: Float
  name: String
  number: Float
  packingUnit: String
  packingUnitString: String
  priceIn: Float
  priceMarket: Float
  priceOut: Float
  rOrderProduct: [ROrderProductItemInput!]
  remark: String
  shelvesTypes: String
  shopCart: [ShopCartItemInput]
  sort: Float
  stock: Float
  sumOrder: Float
  unit: String
  unitString: String
  updateTime: Timestamp
  weight: Float
}

input PromoCodeItemInput {
  code: String
  createTime: Timestamp
  discountAmount: Float
  discountCondition: String
  discountConditionAmount: Float
  discountType: String
  effectiveDateEnd: Timestamp
  effectiveDateStart: Timestamp
  id: String
  imgUrl: String
  isDelete: Float
  isDisable: Float
  name: String
  productCategory: String
  promoCodeType: String
  remark: String
  reuseTimes: Float
  title: String
  updateTime: Timestamp
  userLevel: DictItemInput
}

input ROrderProductItemInput {
  count: Float
  createTime: Timestamp
  dealPrice: Float
  id: String
  isDelete: Float
  name: String
  orderId: String
  orderInfo: OrderInfoItemInput
  product: ProductItemInput
  productId: String
  updateTime: Timestamp
}

input ROrderUserItemInput {
  createTime: Timestamp
  id: String
  isDelete: Float
  name: String
  orderId: String
  orderInfo: OrderInfoItemInput
  updateTime: Timestamp
  user: UserItemInput
  userId: String
}

input ShopCartItemInput {
  createTime: Timestamp
  id: String
  isDelete: Float
  isNext: Float
  name: String
  number: Float
  product: ProductItemInput
  productId: String
  updateTime: Timestamp
  user: UserItemInput
  userId: String
}

input UpdatePasswordInput {
  confirmPassword: String
  newPassword: String
  oldPassword: String
}

input UserAddressItemInput {
  address: String
  city: String
  combineAddress: String
  contactInformation: String
  contactUserName: String
  createTime: Timestamp
  district: String
  id: String
  isDefault: Float
  isDelete: Float
  name: String
  orderInfo: [OrderInfoItemInput]
  province: String
  updateTime: Timestamp
  user: UserItemInput
  userId: String
  zip: String
}

input UserInfoItemInput {
  createTime: Timestamp
  email: String
  id: String
  isDelete: Float
  name: String
  phone: String
  pickupAddressId: String
  updateTime: Timestamp
  user: UserItemInput
  userId: String
  userLevel: String
  userLevelDict: DictItemInput
}

input UserItemInput {
  createTime: Timestamp
  groupOrder: GroupOrderItemInput
  id: String
  isDelete: Float
  name: String
  orderAmountCurrentYear: Float = 0.0
  orderCoinCurrentMonth: Float = 0.0
  orderCoinNextMonth: Float = 0.0
  orderInfo: [OrderInfoItemInput!]
  password: String
  rOrderUser: [ROrderUserItemInput!]
  shopCart: [ShopCartItemInput]
  type: Float
  updateTime: Timestamp
  userAddress: [UserAddressItemInput]
  userInfo: UserInfoItemInput
  userPayCard: [UserPayCardItemInput]
}

input UserListInput {
  email: String = ""
  name: String = ""
  page: Float = 0.0
  phone: String = ""
  registerName: String = ""
  rows_per_page: Float = 10.0
}

input UserPayCardItemInput {
  address: String
  addressDetail: String
  city: String
  code: String
  contact: String
  createTime: Timestamp
  creditAddressInputType: String
  district: String
  expirationTime: Timestamp
  id: String
  isDefault: Float
  isDelete: Float
  name: String
  number: String
  orderInfo: [OrderInfoItemInput]
  province: String
  updateTime: Timestamp
  user: UserItemInput
  userId: String
  userName: String
  zip: String
  zipCode: String
}


"The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch."
scalar Timestamp

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON
